Entrées: 
	g graphe
	n nom du noeud de depart
Début

	Pour chaque noeuds du graphe faire
		v.distance <- infini
		v.precedent <- Indéfini
		l <- l.adjqlis(v)
	Fin Pour
	v(n).distance = 0
	ancien <- null
	Tant que ancien != v faire
		ancien <- v
		Pour i allant de 1 à lNoeud.taille faire
			Pour j allant de 1 a lArc(lNoeud(i)).taille faire
				Si v.valeur(g.suivants(lNoeud(i))).get(j) > v.valeur(lNoeud(i) + g.suivants(lNoeud(i)).get(j).distance alors
					v(i).distance <- v(i).distance+ g(j).cout()
					v(i).precedent <- g.suivants(lNoeud(i)).get(j).destination
				Fin si
			Fin pour
		Fin pour
	Fin Tant que
Fin

l.taille(g.listNoeud());
Lexique:
g : graphe(lNoeuds) : graphe correspondant a une liste de noeuds
lNoeuds: liste(noeud) : liste des noeuds du graphe
noeud<nom: chaine de caractère, adj : liste(arc)> : variable composite correspondant a chaque noeud avec son nom et sa liste de valeurs adjacente
adj : liste(arc) : liste des noeuds adjacente à un noeud
arc<dest : chaine de caractère, cout: entier> : variable composite correspondant à la destination de l'arc et a la valeur de cet arc
n: chaine de caractère: nom correspondant au noeud de l'origine du graphe
l(v) : liste des noeuds du graphe g
v: (valeur, parent) : correspond à toutes les valeurs et parents de l'algorithme de point fixe
distance : entier : valeur correspondant à la distance entre l'origine et le noeud en question
precedent : chaine de caractère: correpond au nom du noeud precedent le noeud en question
ancien(v) : liste de valeur v correspondant a l'ancienne liste l (permet de stocker la ligne précédente)

